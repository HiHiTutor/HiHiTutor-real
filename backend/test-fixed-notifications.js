const mongoose = require('mongoose');
require('dotenv').config();

// ËøûÊé•Âà∞Êï∞ÊçÆÂ∫ì
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/hihitutor', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const User = require('./models/User');

async function testFixedNotifications() {
  try {
    console.log('üß™ ÊµãËØï‰øÆÂ§çÂêéÁöÑÈÄöÁü•API...\n');

    // 1. Ê£ÄÊü•ÊâÄÊúâÊúâ profileChangeLog ÁöÑÁî®Êà∑
    const usersWithChanges = await User.find({
      userType: { $in: ['tutor', 'organization'] },
      profileChangeLog: { $exists: true, $ne: [] }
    }).select('name email tutorId userId profileChangeLog createdAt');

    console.log(`üìä ÊâæÂà∞ ${usersWithChanges.length} ‰∏™Êúâ‰øÆÊîπËÆ∞ÂΩïÁöÑÁî®Êà∑`);

    if (usersWithChanges.length === 0) {
      console.log('‚úÖ Êï∞ÊçÆÂ∫ì‰∏≠Ê≤°Êúâ‰øÆÊîπËÆ∞ÂΩïÔºåËøôÊòØÊ≠£Â∏∏ÁöÑ');
      return;
    }

    // 2. Ê£ÄÊü•ÊØè‰∏™Áî®Êà∑ÁöÑ‰øÆÊîπËÆ∞ÂΩïÊó∂Èó¥
    const now = new Date();
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    
    console.log(`\n‚è∞ ÂΩìÂâçÊó∂Èó¥: ${now.toLocaleString()}`);
    console.log(`‚è∞ 24Â∞èÊó∂Ââç: ${oneDayAgo.toLocaleString()}`);
    
    let totalChanges = 0;
    let recentChanges = 0;
    
    usersWithChanges.forEach((user, index) => {
      console.log(`\nüë§ Áî®Êà∑ ${index + 1}: ${user.name} (${user.tutorId || user.userId})`);
      console.log(`   ‰øÆÊîπËÆ∞ÂΩïÊï∞Èáè: ${user.profileChangeLog.length}`);
      
      user.profileChangeLog.forEach((change, changeIndex) => {
        const changeDate = new Date(change.timestamp);
        const timeAgo = Math.floor((Date.now() - changeDate.getTime()) / (1000 * 60 * 60 * 24));
        const isRecent = changeDate > oneDayAgo;
        
        console.log(`   ${changeIndex + 1}. ‰øÆÊîπÊó∂Èó¥: ${changeDate.toLocaleString()} (${timeAgo} Â§©Ââç) ${isRecent ? 'üü¢ ÊúÄËøë24Â∞èÊó∂' : 'üî¥ Ë∂ÖËøá24Â∞èÊó∂'}`);
        console.log(`      ‰øÆÊîπÂ≠óÊÆµ: ${change.fields.join(', ')}`);
        
        totalChanges++;
        if (isRecent) {
          recentChanges++;
        }
      });
    });

    console.log(`\nüìä ÊÄªÁªì:`);
    console.log(`   ÊÄª‰øÆÊîπËÆ∞ÂΩï: ${totalChanges} Êù°`);
    console.log(`   24Â∞èÊó∂ÂÜÖ: ${recentChanges} Êù°`);
    console.log(`   Ë∂ÖËøá24Â∞èÊó∂: ${totalChanges - recentChanges} Êù°`);

    // 3. Ê®°Êãü‰øÆÂ§çÂêéÁöÑ recent-changes API Êü•ËØ¢
    console.log('\nüîç Ê®°Êãü‰øÆÂ§çÂêéÁöÑ recent-changes API Êü•ËØ¢...');
    
    const apiResult = await User.aggregate([
      {
        $match: {
          userType: { $in: ['tutor', 'organization'] },
          profileChangeLog: { $exists: true, $ne: [] }
        }
      },
      {
        $unwind: '$profileChangeLog'
      },
      {
        $match: {
          'profileChangeLog.timestamp': { $gte: oneDayAgo }
        }
      },
      {
        $sort: { 'profileChangeLog.timestamp': -1 }
      },
      {
        $limit: 5
      },
      {
        $project: {
          tutorId: { $ifNull: ['$tutorId', '$userId', { $concat: ['unknown_', { $toString: '$_id' }] }] },
          name: { $ifNull: ['$name', 'Êú™Áü•ÂßìÂêç'] },
          email: { $ifNull: ['$email', 'Êú™Áü•ÈÉµÁÆ±'] },
          change: {
            timestamp: '$profileChangeLog.timestamp',
            fields: { $ifNull: ['$profileChangeLog.fields', []] },
            newValues: { $ifNull: ['$profileChangeLog.newValues', {}] },
            oldValues: { $ifNull: ['$profileChangeLog.oldValues', {}] },
            ipAddress: '$profileChangeLog.ipAddress',
            userAgent: '$profileChangeLog.userAgent'
          }
        }
      }
    ]);

    console.log(`üìä ‰øÆÂ§çÂêéÁöÑAPIËøîÂõû‰∫Ü ${apiResult.length} Êù°24Â∞èÊó∂ÂÜÖÁöÑËÆ∞ÂΩï`);
    
    if (apiResult.length === 0) {
      console.log('‚úÖ ‰øÆÂ§çÊàêÂäü: Ê≤°Êúâ24Â∞èÊó∂ÂÜÖÁöÑ‰øÆÊîπËÆ∞ÂΩïÔºåAPIËøîÂõûÁ©∫Êï∞ÁªÑ');
    } else {
      console.log('‚ö†Ô∏è  ‰ªçÊúâ24Â∞èÊó∂ÂÜÖÁöÑ‰øÆÊîπËÆ∞ÂΩïÔºåAPIÊ≠£Â∏∏Â∑•‰Ωú');
      apiResult.forEach((change, index) => {
        const changeDate = new Date(change.change.timestamp);
        const timeAgo = Math.floor((Date.now() - changeDate.getTime()) / (1000 * 60 * 60 * 24));
        console.log(`   ${index + 1}. ${change.name} (${change.tutorId}) - ${timeAgo} Â§©Ââç`);
      });
    }

  } catch (error) {
    console.error('‚ùå ÊµãËØïÂ§±Ë¥•:', error);
  } finally {
    mongoose.connection.close();
  }
}

testFixedNotifications();
